# SPDX-FileNotice: This file is based on the FFmpeg Meson build version
# SPDX-FileCopyrightText: 2019-2023 Tim-Philipp MÃ¼ller <tim@centricular.com>
# SPDX-FileCopyrightText: 2022 Nirbheek Chauhan <nirbheek@centricular.com>
# SPDX-FileCopyrightText: 2022 Jordan Petridis <jordan@centricular.com>
# SPDX-License-Identifier: LGPL-2.1-or-later
# SPDX-FileCopyrightText: 2023 L. E. Segovia <amy@amyspark.me>
# SPDX-License-Identifier: BSD-3-Clause

include:
  - project: 'freedesktop/ci-templates'
    ref: 'master'
    file: '/templates/debian.yml'

default:
  interruptible: true

stages:
  - 'image-build'
  - 'build'

.container.debian@common:
  variables:
    FDO_DISTRIBUTION_VERSION: "bookworm-slim"
    FDO_UPSTREAM_REPO: "amyspark/libvpx"
    FDO_DISTRIBUTION_PACKAGES: >-
      meson
      python3-setuptools
      ninja-build
      build-essential
      yasm
      perl
      git

.container.debian@common.minimum:
  extends: '.container.debian@common'
  variables:
    FDO_DISTRIBUTION_TAG: "2023-04-18.1-meson-v1.13.0-minimum"

# The original (meson-ports/ffmpeg) relies on Debian's build-dep.
# However, libvpx tarballs are ready-made and thus do not need perl
# nor doxygen. Perl's installed by default, so we add Doxygen by hand.
.container.debian@common.full:
  extends: '.container.debian@common'
  variables:
    FDO_DISTRIBUTION_TAG: "2023-04-18.1-meson-v1.13.0-full"
    FDO_DISTRIBUTION_EXEC: >-
      echo "deb-src http://deb.debian.org/debian bookworm main" >> /etc/apt/sources.list &&
      apt-get update &&
      apt-get install -y doxygen graphviz

debian-container-build@x86_64@minimum:
  extends:
    - '.fdo.container-build@debian@x86_64'
    - '.container.debian@common.minimum'
  stage: 'image-build'

debian-container-build@x86_64@full:
  extends:
    - '.fdo.container-build@debian@x86_64'
    - '.container.debian@common.full'
  stage: 'image-build'

.build:
  stage: 'build'
  script:
    - meson setup build ${MESON_OPTIONS}
    - meson compile -C build
    - meson test -C build
    - meson install -C build
  artifacts:
    paths:
      - build/meson-logs/

.build nodeps:
  extends:
    - '.build'
    - '.container.debian@common.minimum'
    - '.fdo.distribution-image@debian'

.build withdeps:
  extends:
    - '.build'
    - '.container.debian@common.full'
    - '.fdo.distribution-image@debian'

.build withdepsandnasm:
  extends: '.build withdeps'
  before_script:
    - apt-get remove --yes yasm
    - apt-get update
    - apt-get install --yes nasm

no external deps:
  extends: '.build nodeps'

with deps:
  extends: '.build withdeps'

with deps nasm:
  extends: '.build withdepsandnasm'

.build@i386.common:
  image: 'i386/debian:bookworm'
  variables:
    DEPENDENCIES: >-
      meson
      python3-setuptools
      ninja-build
      build-essential
      yasm
      perl
      git

no external@i386:
  extends:
    - '.build nodeps'
    - '.build@i386.common'
  before_script:
    - apt-get update
    - apt-get install --yes ${DEPENDENCIES}

with deps@i386:
  extends:
    - '.build withdeps'
    - '.build@i386.common'
  before_script:
    - echo "deb-src http://deb.debian.org/debian bookworm main" >> /etc/apt/sources.list
    - apt-get update
    - apt-get install --yes ${DEPENDENCIES}

.build windows:
  image: 'registry.freedesktop.org/gstreamer/gstreamer/amd64/windows:2022-09-23.0-main'
  stage: 'build'
  tags:
    - 'docker'
    - 'windows'
    - '2022'
  variables:
    # Make sure any failure in PowerShell scripts is fatal
    ErrorActionPreference: 'Stop'
    WarningPreference: 'Stop'
    # Uncomment the following key if need to pass custom args, as well with the
    # $env:MESON_ARGS line in the `script:` blocks
    # MESON_ARGS: >-
    #   -Dfoo=enabled
    #   -Dbar=disabled
  before_script:
    # Make sure meson is up to date, so we don't need to rebuild the image with each release
    - pip3 install -U meson
  script:
    # For some reason, options are separated by newline instead of space, so we
    # have to replace them first.
    # - $env:MESON_ARGS = $env:MESON_ARGS.replace("`n"," ")
    # Gitlab executes PowerShell in docker, but VsDevCmd.bat is a batch script.
    # Environment variables substitutions is done by PowerShell before calling
    # cmd.exe, that's why we use $env:FOO instead of %FOO%
    - cmd.exe /C "C:\BuildTools\Common7\Tools\VsDevCmd.bat -host_arch=amd64 -arch=$env:ARCH &&
        meson setup build $env:MESON_ARGS &&
        meson compile -C build"

vs2019:
  extends: '.build windows'
  variables:
    ARCH: 'amd64'

vs2019 no-optimization debug:
  extends: '.build windows'
  variables:
    ARCH: 'amd64'
    MESON_ARGS: '--optimization=0 --debug'

vs2019 x86:
  extends: '.build windows'
  stage: 'build'
  variables:
    ARCH: 'x86'
  artifacts:
    paths:
      - build1/meson-logs/
  # MSVC is known to get stuck on x86 due to empty Nasm PDBs
  # I fixed this for the Meson build, but in any case...
  # see https://developercommunity.visualstudio.com/t/MSVC-deadlockscrashes-when-linking-a-Me/10336032
  timeout: 30 minutes
  script:
    - cmd.exe /C "C:\BuildTools\Common7\Tools\VsDevCmd.bat -host_arch=amd64 -arch=$env:ARCH &&
        meson compile -C build $env:MESON_ARGS"

vs2019 arm64 cross:
  extends: '.build windows'
  stage: 'build'
  variables:
    ARCH: 'arm64'
    MESON_ARGS: '--cross-file ci/vs-arm64-cross-file.txt'

.build darwin:
  stage: 'build'
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHA}"
    expire_in: '5 days'
    when: 'always'
    paths:
      - "build/meson-logs/*txt"
  before_script:
    - pip3 install --upgrade pip
    # Make sure meson is up to date
    - pip3 install -U meson
    # Need to install certificates for python
    - pip3 install --upgrade certifi
    # Another way to install certificates
    - open /Applications/Python\ 3.8/Install\ Certificates.command
    # Get ninja
    - pip3 install -U ninja
  script:
    - CERT_PATH=$(python3 -m certifi) && export SSL_CERT_FILE=${CERT_PATH} && export REQUESTS_CA_BUNDLE=${CERT_PATH} && meson setup build
    - meson compile -C build
    - meson test -C build

macOS x86_64:
  extends: '.build darwin'
  stage: 'build'
  tags:
    - gst-macos-12.3

iOS arm64 cross:
  extends: '.build darwin'
  stage: 'build'
  tags:
    - gst-ios-15.4
  script:
    - |
      cat > ios-cross-file.txt <<EOF
      [host_machine]
      system = 'darwin'
      cpu_family = 'aarch64'
      cpu = 'aarch64'
      endian = 'little'

      [properties]
      c_args =      ['-arch', 'arm64', '--sysroot=$(xcrun --sdk iphoneos --show-sdk-path)', '-miphoneos-version-min=11.0']
      c_link_args = ['-arch', 'arm64', '--sysroot=$(xcrun --sdk iphoneos --show-sdk-path)', '-miphoneos-version-min=11.0']

      [binaries]
      ar        = '$(xcrun --find --sdk iphoneos ar)'
      c         = '$(xcrun --find --sdk iphoneos clang)'
      cpp       = '$(xcrun --find --sdk iphoneos clang++)'
      ranlib    = '$(xcrun --find --sdk iphoneos ranlib)'
      strip     = '$(xcrun --find --sdk iphoneos strip)'
      pkgconfig = 'false'
      EOF
    - CERT_PATH=$(python3 -m certifi) && export SSL_CERT_FILE=${CERT_PATH} && export REQUESTS_CA_BUNDLE=${CERT_PATH} && meson --cross-file=ios-cross-file.txt build
    - ninja -C build
    - meson test -C build

.build android:
  image: 'registry.freedesktop.org/gstreamer/cerbero/android:2022-09-22.0'
  stage: 'build'
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_SHA}"
    expire_in: '5 days'
    when: 'always'
    paths:
      - "build/meson-logs/*txt"
  variables:
    ANDROID_SDK: '/android/sdk'
    ANDROID_NDK: '/android/ndk'
    ANDROID_API: '21'
    TOOLCHAIN: "$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64"
  before_script:
    - dnf install -y python3-pip binutils nasm gcc ninja-build perl-interpreter
    - pip3 install -U meson
  script:
    - |
      cat > android-cross-file.txt <<EOF
      [host_machine]
      system = 'android'
      cpu_family = '$ARCH'
      cpu = '$ARCH'
      endian = 'little'

      [properties]
      sys_root = '$ANDROID_NDK/sysroot'

      [binaries]
      ar        = '$TOOLCHAIN/bin/${ARCH}-linux-${ANDROID_HOST}-ar'
      c         = '$TOOLCHAIN/bin/${CLANG_ARCH}-linux-${ANDROID_HOST}${ANDROID_API}-clang'
      cpp       = '$TOOLCHAIN/bin/${CLANG_ARCH}-linux-${ANDROID_HOST}${ANDROID_API}-clang++'
      ranlib    = '$TOOLCHAIN/bin/${ARCH}-linux-${ANDROID_HOST}-ranlib'
      strip     = '$TOOLCHAIN/bin/${ARCH}-linux-${ANDROID_HOST}-strip'
      pkgconfig = 'false'
      EOF
    - meson --cross-file android-cross-file.txt build
    - ninja -C build

android arm64 cross:
  extends: '.build android'
  stage: 'build'
  variables:
    ARCH: 'aarch64'
    CLANG_ARCH: 'aarch64'
    ANDROID_HOST: 'android'

android armv7 cross:
  extends: '.build android'
  stage: 'build'
  variables:
    ARCH: 'arm'
    CLANG_ARCH: 'armv7a'
    ANDROID_HOST: 'androideabi'
